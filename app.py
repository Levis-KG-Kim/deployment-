# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Sx35swSk-Q6TzsqhwgVthnooO1tJmMor
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import shap
import xgboost as xgb
from sklearn.preprocessing import StandardScaler
from joblib import load
import altair as alt


# Page configuration
st.set_page_config(
    page_title="US Population Dashboard",
    page_icon="üèÇ",
    layout="wide",
    initial_sidebar_state="expanded")

alt.themes.enable("dark")

# Load data
df_reshaped = pd.read_csv('data/final_merged.csv')

# Sidebar
with st.sidebar:
    st.title('Terrestrial ecosystems in Protected Areas')

    year_list = list(df_reshaped.Year.unique())[::-1]

    selected_year = st.selectbox('Select a year', year_list)
    df_selected_year = df_reshaped[df_reshaped.Year == selected_year]
    df_selected_year_sorted = df_selected_year.sort_values(by="Area_Name", ascending=False)

    area_list = list(df_selected_year_sorted.Area_Name.unique())

    selected_area = st.selectbox('Select an area', area_list)
    df_selected_area = df_selected_year_sorted[df_selected_year_sorted.Area_Name == selected_area]


    color_theme_list = ['blues', 'cividis', 'greens', 'inferno', 'magma', 'plasma', 'reds', 'rainbow', 'turbo', 'viridis']
    selected_color_theme = st.selectbox('Select a color theme', color_theme_list)


# Load Model
@st.cache_resource
def load_model():
    model = xgb.Booster()
    model.load_model("xgboost_model.json")  # Adjust file path
    return model

# Main Dashboard UI
# Dashboard Main Panel
col = st.columns((1.5, 4.5, 2), gap='medium')

with col[0]:
    st.markdown('#### Gains/Losses')

    st.subheader(f"Trends for {selected_area}")

    fig, axes = plt.subplots(4,1,figsize=(10,10),sharex=True)
    Selected_row = df_reshaped[(df_reshaped.Area_Name == selected_area)]
    #ndvi
    sns.lineplot(data=Selected_row, x='Year', y='mean_ndvi',marker='o' ,ax=axes[0])
    axes[0].set_title('NDVI Trend over Time ({selected_area})')
    axes[0].set_ylabel('Mean Annual NDVI')
    #ndwi
    sns.lineplot(data=Selected_row, x='Year', y='mean_ndwi',marker='o' ,ax=axes[1])
    axes[1].set_title('NDWI Trend over Time ({selected_area})')
    axes[1].set_ylabel('Mean Annual NDWI')
    #bsi
    sns.lineplot(data=Selected_row, x='Year', y='mean_bsi',marker='o' ,ax=axes[2])
    axes[2].set_title('BSI Trend over Time ({selected_area})')
    axes[2].set_ylabel('Mean Annual BSI')
    #rainfall
    sns.lineplot(data=Selected_row, x='Year', y='mean_rainfall',marker='o' ,ax=axes[3])
    axes[3].set_title('Rainfall Trend over Time ({selected_area})')
    axes[3].set_ylabel('Mean Annual Rainfall')

    plt.xlabel('Year')
    plt.tight_layout()
    st.pyplot(fig)

with col[1]:
    st.markdown('#### Vegetation Indices')
    # Predict Biodiversity Change
    if st.button("Predict Change"):

        # Prepare Features
        features = np.array([selected_row['mean_ndvi'], selected_row['mean_ndwi'], selected_row['mean_bsi']]).reshape(1, -1)
        prediction = model.predict(xgb.DMatrix(features))
        result = ["Loss", "Stable", "Gain"][int(prediction[0])]
        st.success(f"Biodiversity Change: {result}")

    # SHAP Interpretation
    if st.checkbox("Show Feature Importance"):
        explainer = shap.TreeExplainer(model)
        shap_values = explainer.shap_values(features)
        shap.summary_plot(shap_values, features)
with col[2]:
    st.markdown('#### Area Map')

with st.expander('About', expanded=True):
    st.write('''
            Time series analysis and forecasting
            ''')